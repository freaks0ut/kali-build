- name: Ensure Active Directory tools directory exists
  ansible.builtin.file:
    path: /opt/tools/ad
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0755'
  become: true

- name: Install required system packages
  ansible.builtin.apt:
    name:
      - git
      - python3
      - python3-pip
      - python3-venv
    state: present
    update_cache: yes
  become: true

- name: Install Impacket
  ansible.builtin.git:
    repo: 'https://github.com/fortra/impacket.git'
    dest: /opt/tools/ad/impacket
    version: master
    force: yes
  become: true

- name: Install Impacket dependencies
  ansible.builtin.shell: |
    cd /opt/tools/ad/impacket
    /usr/bin/python3 -m pip install -r requirements.txt --break-system-packages
    /usr/bin/python3 setup.py install
  become: true

- name: Ensure Impacket scripts are executable
  ansible.builtin.file:
    path: "/opt/tools/ad/impacket/examples/{{ item }}"
    mode: '0755'
  loop:
    - ntlmrelayx.py
    - secretsdump.py
  become: true

- name: Install ntlmrelayx from Impacket
  ansible.builtin.file:
    src: /opt/tools/ad/impacket/examples/ntlmrelayx.py
    dest: /usr/local/bin/ntlmrelayx
    state: link
    mode: '0755'
  become: true

- name: Install secretsdump from Impacket
  ansible.builtin.file:
    src: /opt/tools/ad/impacket/examples/secretsdump.py
    dest: /usr/local/bin/secretsdump
    state: link
    mode: '0755'
  become: true


- name: Ensure Certipy virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/certipy-venv"
  args:
    creates: /opt/tools/ad/certipy-venv
  become: true

- name: Install Certipy in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/certipy-venv/bin/activate
    pip install --upgrade pip
    pip install certipy-ad
  args:
    executable: /bin/bash
  become: true

- name: Ensure Certipy is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/certipy-venv/bin/certipy
    dest: /usr/local/bin/certipy
    state: link
    mode: '0755'
  become: true



- name: Download Rubeus release zip
  ansible.builtin.get_url:
    url: "https://github.com/GhostPack/Rubeus/archive/refs/tags/1.6.4.zip"
    dest: "/opt/tools/ad/Rubeus-1.6.4.zip"
    mode: '0644'
  become: true

- name: Install unzip if not installed
  ansible.builtin.apt:
    name: unzip
    state: present
  become: true

- name: Extract Rubeus.exe from the zip
  ansible.builtin.unarchive:
    src: "/opt/tools/ad/Rubeus-1.6.4.zip"
    dest: "/opt/tools/ad/"
    remote_src: yes
  become: true

- name: Install SharpHound
  ansible.builtin.get_url:
    url: "https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe?raw=true"
    dest: /opt/tools/ad/SharpHound.exe
    mode: '0755'
  become: true


# -----------------------------
# ✅ BloodyAD Installation
# -----------------------------

- name: Ensure BloodyAD virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/bloodyad-venv"
  args:
    creates: /opt/tools/ad/bloodyad-venv
  become: true

- name: Install required system packages for BloodyAD
  ansible.builtin.apt:
    name:
      - gcc
      - python3-dev
      - libkrb5-dev
    state: present
    update_cache: yes
  become: true

- name: Install BloodyAD in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/bloodyad-venv/bin/activate
    pip install --upgrade pip
    pip install bloodyAD
  args:
    executable: /bin/bash
  become: true

- name: Ensure BloodyAD is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/bloodyad-venv/bin/bloodyAD
    dest: /usr/local/bin/bloodyAD
    state: link
    mode: '0755'
  become: true


# -----------------------------
# ✅ NXC (NetExec) Installation
# -----------------------------

- name: Ensure NXC virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/nxc-venv"
  args:
    creates: /opt/tools/ad/nxc-venv
  become: true

- name: Install required system packages for NXC
  ansible.builtin.apt:
    name:
      - python3-dev
      - python3-pip
      - gcc
      - libkrb5-dev
      - libssl-dev
      - libffi-dev
    state: present
    update_cache: yes
  become: true

- name: Clone NetExec (NXC) repository
  ansible.builtin.git:
    repo: "https://github.com/Pennyw0rth/NetExec.git"
    dest: /opt/tools/ad/nxc
    version: main
    force: yes
  become: true

- name: Install NXC dependencies manually in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/nxc-venv/bin/activate
    pip install --upgrade pip
    pip install setuptools wheel
    pip install pyasn1 pycryptodome ldap3 impacket
  args:
    executable: /bin/bash
  become: true

- name: Ensure NXC is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/nxc-venv/bin/python
    dest: /usr/local/bin/nxc
    state: link
    mode: '0755'
  become: true


# -----------------------------
# ✅ PyWhisker Installation
# -----------------------------

- name: Ensure PyWhisker virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/pywhisker-venv"
  args:
    creates: /opt/tools/ad/pywhisker-venv
  become: true

- name: Install PyWhisker in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/pywhisker-venv/bin/activate
    pip install --upgrade pip
    pip install pywhisker
  args:
    executable: /bin/bash
  become: true

- name: Ensure PyWhisker is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/pywhisker-venv/bin/pywhisker
    dest: /usr/local/bin/pywhisker
    state: link
    mode: '0755'
  become: true