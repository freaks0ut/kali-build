- name: Ensure Active Directory tools directory exists
  ansible.builtin.file:
    path: /opt/tools/ad
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0755'
  become: true

- name: Install required system packages
  ansible.builtin.apt:
    name:
      - git
      - python3
      - python3-pip
      - python3-venv
    state: present
    update_cache: yes
  become: true

# -----------------------------
# ✅ Install Impacket in a Virtual Environment
# -----------------------------

- name: Ensure Python venv module is installed
  ansible.builtin.package:
    name: python3-venv
    state: present
  become: true

- name: Clone Impacket Repository
  ansible.builtin.git:
    repo: 'https://github.com/fortra/impacket.git'
    dest: /opt/tools/ad/impacket
    version: master
    force: yes
  become: true

- name: Ensure Impacket virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/impacket-venv"
  args:
    creates: /opt/tools/ad/impacket-venv
  become: true

- name: Install Impacket dependencies inside virtual environment
  ansible.builtin.pip:
    requirements: /opt/tools/ad/impacket/requirements.txt
    virtualenv: /opt/tools/ad/impacket-venv
    virtualenv_command: /usr/bin/python3 -m venv
  become: true

- name: Install Impacket inside virtual environment
  ansible.builtin.pip:
    name: /opt/tools/ad/impacket
    virtualenv: /opt/tools/ad/impacket-venv
  become: true

- name: Ensure /usr/local/bin exists
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: '0755'
  become: true

- name: Ensure Impacket scripts are globally accessible with 'impacket-' prefix
  ansible.builtin.file:
    src: "/opt/tools/ad/impacket-venv/bin/{{ script }}"
    dest: "/usr/local/bin/impacket-{{ script | regex_replace('\\.py$', '') }}"
    state: link
    mode: '0755'
    force: yes
  loop:
    - atexec.py
    - dcomexec.py
    - dpapi.py
    - esentutl.py
    - getArch.py
    - GetADUsers.py
    - getPac.py
    - getTGT.py
    - GetUserSPNs.py
    - karmaSMB.py
    - mimikatz.py
    - netview.py
    - ntlmrelayx.py
    - psexec.py
    - rpcdump.py
    - samrdump.py
    - secretsdump.py
    - smbclient.py
    - smbexec.py
    - ticketer.py
    - wmiexec.py
  loop_control:
    loop_var: script
  become: true


- name: Install ntlmrelayx from Impacket
  ansible.builtin.file:
    src: /opt/tools/ad/impacket/examples/ntlmrelayx.py
    dest: /usr/local/bin/ntlmrelayx
    state: link
    mode: '0755'
  become: true

- name: Install secretsdump from Impacket
  ansible.builtin.file:
    src: /opt/tools/ad/impacket/examples/secretsdump.py
    dest: /usr/local/bin/secretsdump
    state: link
    mode: '0755'
  become: true


- name: Ensure Certipy virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/certipy-venv"
  args:
    creates: /opt/tools/ad/certipy-venv
  become: true

- name: Install Certipy in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/certipy-venv/bin/activate
    pip install --upgrade pip
    pip install certipy-ad
  args:
    executable: /bin/bash
  become: true

- name: Ensure Certipy is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/certipy-venv/bin/certipy
    dest: /usr/local/bin/certipy
    state: link
    mode: '0755'
  become: true



- name: Download Rubeus release zip
  ansible.builtin.get_url:
    url: "https://github.com/GhostPack/Rubeus/archive/refs/tags/1.6.4.zip"
    dest: "/opt/tools/ad/Rubeus-1.6.4.zip"
    mode: '0644'
  become: true

- name: Install unzip if not installed
  ansible.builtin.apt:
    name: unzip
    state: present
  become: true

- name: Extract Rubeus.exe from the zip
  ansible.builtin.unarchive:
    src: "/opt/tools/ad/Rubeus-1.6.4.zip"
    dest: "/opt/tools/ad/"
    remote_src: yes
  become: true

- name: Install SharpHound
  ansible.builtin.get_url:
    url: "https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe?raw=true"
    dest: /opt/tools/ad/SharpHound.exe
    mode: '0755'
  become: true


# -----------------------------
# ✅ BloodyAD Installation
# -----------------------------

- name: Ensure BloodyAD virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/bloodyad-venv"
  args:
    creates: /opt/tools/ad/bloodyad-venv
  become: true

- name: Install required system packages for BloodyAD
  ansible.builtin.apt:
    name:
      - gcc
      - python3-dev
      - libkrb5-dev
    state: present
    update_cache: yes
  become: true

- name: Install BloodyAD in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/bloodyad-venv/bin/activate
    pip install --upgrade pip
    pip install bloodyAD
  args:
    executable: /bin/bash
  become: true

- name: Ensure BloodyAD is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/bloodyad-venv/bin/bloodyAD
    dest: /usr/local/bin/bloodyAD
    state: link
    mode: '0755'
  become: true


# -----------------------------
# ✅ NXC (NetExec) Installation
# -----------------------------

- name: Ensure NXC virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/nxc-venv"
  args:
    creates: /opt/tools/ad/nxc-venv
  become: true

- name: Install required system packages for NXC
  ansible.builtin.apt:
    name:
      - python3-dev
      - python3-pip
      - gcc
      - libkrb5-dev
      - libssl-dev
      - libffi-dev
    state: present
    update_cache: yes
  become: true

- name: Clone NetExec (NXC) repository
  ansible.builtin.git:
    repo: "https://github.com/Pennyw0rth/NetExec.git"
    dest: /opt/tools/ad/nxc
    version: main
    force: yes
  become: true

- name: Install NXC dependencies manually in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/nxc-venv/bin/activate
    pip install --upgrade pip
    pip install setuptools wheel
    pip install pyasn1 pycryptodome ldap3 impacket
  args:
    executable: /bin/bash
  become: true

- name: Ensure NXC is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/nxc-venv/bin/python
    dest: /usr/local/bin/nxc
    state: link
    mode: '0755'
  become: true


# -----------------------------
# ✅ PyWhisker Installation
# -----------------------------

- name: Ensure PyWhisker virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/pywhisker-venv"
  args:
    creates: /opt/tools/ad/pywhisker-venv
  become: true

- name: Install PyWhisker in the virtual environment
  ansible.builtin.shell: |
    source /opt/tools/ad/pywhisker-venv/bin/activate
    pip install --upgrade pip
    pip install pywhisker
  args:
    executable: /bin/bash
  become: true

- name: Ensure PyWhisker is globally accessible
  ansible.builtin.file:
    src: /opt/tools/ad/pywhisker-venv/bin/pywhisker
    dest: /usr/local/bin/pywhisker
    state: link
    mode: '0755'
  become: true

# -----------------------------
# ✅ Install PKINITtools Properly
# -----------------------------

- name: Ensure Python venv module is installed
  ansible.builtin.package:
    name: python3-venv
    state: present
  become: true

- name: Clone PKINITtools repository
  ansible.builtin.git:
    repo: 'https://github.com/dirkjanm/PKINITtools.git'
    dest: /opt/tools/ad/pkinittools
    version: master
    force: yes
  become: true

- name: Ensure PKINITtools virtual environment exists
  ansible.builtin.command:
    cmd: "/usr/bin/python3 -m venv /opt/tools/ad/pkinittools-venv"
  args:
    creates: /opt/tools/ad/pkinittools-venv
  become: true

- name: Install PKINITtools dependencies in the virtual environment
  ansible.builtin.pip:
    virtualenv: /opt/tools/ad/pkinittools-venv
    virtualenv_command: /usr/bin/python3 -m venv
    requirements: /opt/tools/ad/pkinittools/requirements.txt
  become: true
  ignore_errors: true  # Ignore if there's no requirements.txt

- name: Ensure PKINITtools scripts are executable
  ansible.builtin.file:
    path: "/opt/tools/ad/pkinittools/{{ script }}"
    mode: '0755'
  loop:
    - gettgtpkinit.py
    - getnthash.py
    - gets4uticket.py
  loop_control:
    loop_var: script
  become: true

- name: Ensure PKINITtools scripts are globally accessible with 'pkinit-' prefix
  ansible.builtin.file:
    src: "/opt/tools/ad/pkinittools/{{ script }}"
    dest: "/usr/local/bin/pkinit-{{ script | regex_replace('\\.py$', '') }}"
    state: link
    mode: '0755'
  loop:
    - gettgtpkinit.py
    - getnthash.py
    - gets4uticket.py
  loop_control:
    loop_var: script
  become: true

# -----------------------------
# ✅ Copy + Unzip RunAs + SharpGPOAbuse
# -----------------------------

- name: Install unzip package
  ansible.builtin.apt:
    name: unzip
    state: present
    update_cache: yes
  become: true

- name: Copy SharpGPOAbuse.zip to AD directory
  ansible.builtin.copy:
    src: files/SharpGPOAbuse.zip
    dest: /opt/tools/ad/SharpGPOAbuse.zip
    mode: '0644'
  become: true

- name: Extract SharpGPOAbuse.zip
  ansible.builtin.unarchive:
    src: /opt/tools/ad/SharpGPOAbuse.zip
    dest: /opt/tools/ad/
    remote_src: yes
    mode: '0755'
  become: true

- name: Copy RunAs.zip to AD directory
  ansible.builtin.copy:
    src: files/RunAs.zip
    dest: /opt/tools/ad/RunAs.zip
    mode: '0644'
  become: true

- name: Extract RunAs.zip
  ansible.builtin.unarchive:
    src: /opt/tools/ad/RunAs.zip
    dest: /opt/tools/ad/
    remote_src: yes
    mode: '0755'
  become: true
